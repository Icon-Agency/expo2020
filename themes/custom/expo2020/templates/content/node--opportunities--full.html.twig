{#
/**
 * @file
 * Bootstrap Barrio's theme implementation to display a node.
 *
 * Available variables:
 * - node: The node entity with limited access to object properties and methods.
     Only "getter" methods (method names starting with "get", "has", or "is")
     and a few common methods such as "id" and "label" are available. Calling
     other methods (such as node.delete) will result in an exception.
 * - label: The title of the node.
 * - content: All node items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - author_picture: The node author user entity, rendered using the "compact"
 *   view mode.
 * - metadata: Metadata for this node.
 * - date: Themed creation date field.
 * - author_name: Themed author name field.
 * - url: Direct URL of the current node.
 * - display_submitted: Whether submission information should be displayed.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - node: The current template type (also known as a "theming hook").
 *   - node--type-[type]: The current node type. For example, if the node is an
 *     "Article" it would result in "node--type-article". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - node--view-mode-[view_mode]: The View Mode of the node; for example, a
 *     teaser would result in: "node--view-mode-teaser", and
 *     full: "node--view-mode-full".
 *   The following are controlled through the node publishing options.
 *   - node--promoted: Appears on nodes promoted to the front page.
 *   - node--sticky: Appears on nodes ordered above other non-sticky nodes in
 *     teaser listings.
 *   - node--unpublished: Appears on unpublished nodes visible only to site
 *     admins.
 * - title_attributes: Same as attributes, except applied to the main title
 *   tag that appears in the template.
 * - content_attributes: Same as attributes, except applied to the main
 *   content tag that appears in the template.
 * - author_attributes: Same as attributes, except applied to the author of
 *   the node tag that appears in the template.
 * - title_prefix: Additional output populated by modules, intended to be
 *   displayed in front of the main title tag that appears in the template.
 * - title_suffix: Additional output populated by modules, intended to be
 *   displayed after the main title tag that appears in the template.
 * - view_mode: View mode; for example, "teaser" or "full".
 * - teaser: Flag for the teaser state. Will be true if view_mode is 'teaser'.
 * - page: Flag for the full page state. Will be true if view_mode is 'full'.
 * - readmore: Flag for more state. Will be true if the teaser content of the
 *   node cannot hold the main body content.
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_node()
 */
#}

{# development #}
{# kint(content) #}

{%
  set classes = [
    'node',
    'node--type-' ~ node.bundle|clean_class,
    node.isPromoted() ? 'node--promoted',
    node.isSticky() ? 'node--sticky',
    not node.isPublished() ? 'node--unpublished',
    view_mode ? 'node--view-mode-' ~ view_mode|clean_class,
    'clearfix',
  ]
%}
<h1 class="sr-only">Opportunities</h1>

<div id="parallax-container">
  <div class="parallax-div parallax-banner">
    <img class="pavilion-bg img"
         src="{{ file_url(content.field_top_bnr_bk_img|field_target_entity.field_media_image.entity.uri.value) }}"
         alt="{{ content.field_top_bnr_bk_img|field_target_entity.field_media_image.alt }}"/>
      <div class="angled-mask opportunities-angle"></div>
  </div>
    {#<div class="parallax-div">
        <img src="/{{ base_path ~ directory }}/assets/src/images/cover1.png" class="pavilion-cover"></div>#}
  <div class="parallax-div pavilion-layer-top">
      <div class="pavilion-shape container">
          <div class="col-xl-6 col-lg-7 col-md-9 h-100">
              {% if content.field_top_banner_title %}
                  <h2 class="pavilion-banner-title">
                      {{ content.field_top_banner_title }}
                  </h2>
              {% endif %}

              {% if content.field_top_banner_button_link.0 %}
                  <a class="btn btn-primary btn-primary-orange" href="{{ content.field_top_banner_button_link[0]['#url'] }}">
                      {{ content.field_top_banner_button_link.0['#title'] }}
                  </a>
              {% endif %}
          </div>

      </div>
  </div>
</div>

<section class="extra-pavilion" data-section-name="extra">
    <div class="text-under">
      {% if content.field_text_area_under_top_banner %}
        <div class="container">
          {{ content.field_text_area_under_top_banner|raw }}
        </div>
      {% endif %}
    </div>
</section>


{% if content['field_pinned_sliders'][0] %}
    {{ content['field_pinned_sliders'] }}
{% endif %}


<section class="oppo-footer footer-section" data-section-name="footer">

  {% if content['field_text_under_pinned_slider'][0] %}
    <div class="container">
      {{ content['field_text_under_pinned_slider'] }}
    </div>
  {% endif %}


  <div class="partners container-fluid">
    <div class="container partner-container">
      <h2>Major Partners and Major Sponsors</h2>
      <div class="partner-logos row">
        <div class="col-md-12 col-sm-2">
          {% if content['field_top_5_major_partners'][0] %}
            {{ content['field_top_5_major_partners'] }}
          {% endif %}
        </div>
      </div>
    </div>
  </div>

</section>

<section class="pavilion-last-section" data-section-name="footer-second">
  {% if content['field_bottom_content'][0] %}
  <div class="container">
    {{ content['field_bottom_content'] }}
  </div>
  {% endif %}
</section>

<script type="text/javascript">
    var mobile = window.matchMedia("(max-width: 768px)");
    if(!mobile.matches) {
        window.addEventListener('scroll', () => {
            let parent = document.getElementById('parallax-container');
            let children = parent.getElementsByClassName('parallax-div');
            for(let i = 0; i < children.length; i++) {
                children[i].style.transform = 'translateY(-' + (window.pageYOffset * i / children.length) + 'px)';
            }
        }, false)
    }
</script>