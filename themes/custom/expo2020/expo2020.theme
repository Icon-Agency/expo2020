<?php

/**
 * @file
 * Functions to support theming in the SASS Starterkit subtheme.
 */
use Drupal\Core\Link;
use Drupal\block\Entity\Block;
use Drupal\Core\Template\Attribute;
use Drupal\Core\Form\FormStateInterface;
use Drupal\taxonomy\Entity\Term;
use Drupal\Core\Block\BlockPluginInterface;
use Drupal\Core\StringTranslation\TranslatableMarkup;

/**
 * Implements hook_form_system_theme_settings_alter() for settings form.
 *
 * Replace Barrio setting options with subtheme ones.
 */
function expo2020_form_system_theme_settings_alter(&$form, FormStateInterface $form_state)
{
  unset($form['affix']);
  unset($form['fonts']);
  unset($form['components']['navbar']);
}

/**
 * Implements hook_preprocess_html();
 */
function expo2020_preprocess_html(&$variables)
{
  $exception = \Drupal::requestStack()->getCurrentRequest()->attributes->get('exception');
  if ($exception instanceof \Symfony\Component\HttpKernel\Exception\NotFoundHttpException) {
    $variables['attributes']['class'][] = 'error-page';
  }
}

/**
 * Implements hook_preprocess_page();
 */
function expo2020_preprocess_page(&$variables) {

  $dev = (getenv('EXPO_THEME_MODE') === 'dev');

  if ($dev) {
    $libs = ['expo2020/dev-global-styling'];
  } else {
    $libs = ['expo2020/global-styling'];
  }

  foreach ($libs as $lib) {
    $variables['#attached']['library'][] = $lib;
  }

  // Junk
  unset($variables['navbar_attributes']);
  unset($variables['container']);

  // We shift this inwards to match design requirements
  if (!empty($variables['content_attributes']['class'])) {
    $variables['content_attributes']->removeClass('col');
  }

  $variables['content_main_attributes'] = new Attribute();
  $variables['content_main_attributes']->addClass('panels', 'main-container');

  // Mobile menus
  $menus = ["main", "portal"];

  $combined_tree = [];
  $menu_tree     = \Drupal::menuTree();
  $parameters    = $menu_tree->getCurrentRouteMenuTreeParameters(trim($menus[0]));
  $manipulators  = [
    // Show links to nodes that are accessible for the current user.
    ['callable' => 'menu.default_tree_manipulators:checkNodeAccess'],
    // Only show links that are accessible for the current user.
    ['callable' => 'menu.default_tree_manipulators:checkAccess'],
    // Use the default sorting of menu links.
    ['callable' => 'menu.default_tree_manipulators:generateIndexAndSort'],
  ];
  // Force the entire tree to be build by setting expandParents to an
  // empty array.
  $parameters->expandedParents = [];
  // Iterate over the menus and merge them together.
  foreach ($menus as $menu_name) {
    $tree_items       = $menu_tree->load(trim($menu_name), $parameters);
    $tree_manipulated = $menu_tree->transform($tree_items, $manipulators);
    $combined_tree    = array_merge($combined_tree, $tree_manipulated);
  }

  $menu = $menu_tree->build($combined_tree);

  $menu['#theme']     = 'menu__mobile';
  $menu['#menu_name'] = 'mobile';

  $variables['mobile_menu'] = [
    '#prefix' => '<nav id="mobile-menu" role="navigation" aria-hidden="true" hidden style="dislay: none">',
    '#suffix' => '</nav>',
    '#markup' => \Drupal::service("renderer")->renderRoot($menu),
  ];

  // Enable wrapper by default
  $variables['add_content_outer_wrap'] = TRUE;
  $node = \Drupal::routeMatch()->getParameter('node');
  $content_types_without_content_container = [
    'home_page',
    'pavilion_landing_page',
    'contact',
    'opportunities',
    'themes',
    'media_landing_page',
    'sponsors_partners_landing_page',
  ];
  if (!empty($node)){
    if (in_array($node->bundle(), $content_types_without_content_container)){
      $variables['add_content_outer_wrap'] = FALSE;
    }

    $types_without_bc = [
      'contact',
      'media_landing_page',
      'themes',
      'sponsors_partners_landing_page',
    ];

    if (in_array($node->bundle(),$types_without_bc) && isset($variables['page']['content']['expo2020_breadcrumbs'])){
      unset($variables['page']['content']['expo2020_breadcrumbs']);
    }
  }else{
    $current_path = \Drupal::service('path.current')->getPath();
    $result = \Drupal::service('path.alias_manager')->getAliasByPath($current_path);

    $path_aliases_without_container = [
      '/search'
    ];

    if (in_array($result, $path_aliases_without_container)){
      $variables['add_content_outer_wrap'] = FALSE;
    }

    $path_aliases_without_bc = [
      '/search'
    ];

    if (in_array($result,$path_aliases_without_bc) && isset($variables['page']['content']['expo2020_breadcrumbs'])){
      unset($variables['page']['content']['expo2020_breadcrumbs']);
    }
  }

  $route_name = \Drupal::routeMatch()->getRouteName();
  if (\Drupal::routeMatch()->getRouteName() == 'system.404' && isset($variables['page']['content']['expo2020_content'])){
    $variables['page']['content']['expo2020_content'] = [
      '#markup' => '<div class="page-not-found-content mt-5 mb-5"><h2>This page can not be found</h2><br><a href="/">Click here to go back to the home page.</a></div>',
    ];
  }
}

/**
 * Implements hook_preprocess_block().
 */
function expo2020_preprocess_block(&$variables)
{
  $element_content = $variables['elements']['content'];
  $content = &$variables['content'];

  if ($variables['base_plugin_id'] === 'block_content' && !empty($variables['label'])) {
    if (isset($variables['content']['block_description'][0][0])) {
      // Fix up the block title
      $false_title = $variables['content']['block_description'][0][0]['#markup'];
      $replaced    = preg_replace('/(<h[0-9]>)(.*?)(<\/h[0-9]>)/i', '$1' . $variables['label'] . '$3', $false_title);
      // Replace the content
      $variables['content']['block_description'][0][0]['#markup'] = $replaced;
      // Hide original
      $variables['label'] = null;
    }
  }

  if ($variables['base_plugin_id'] === 'menu_block' && !empty($variables['elements']['#id'])) {
    $block = Block::load($variables['elements']['#id']);
    // Add so we can subtheme the block suggestions on this region
    $variables['content']['#menu_block_configuration']['region']          = $block->getRegion();
    $variables['content']['#menu_block_configuration']['top_level_title'] = _expo2020_get_top_menu_title();
  }

  if (isset($element_content['#block_content']) && $element_content['#block_content']->bundle() == 'countdown_block') {
    if (!empty($content['field_count_down_date'][0]['#text'])) {
      $content['field_count_down_date']['#attached']['drupalSettings']['countdownDate'] = $content['field_count_down_date'][0]['#text'];
      $content['field_count_down_date'][0] = [
        '#type'       => 'container',
        '#attributes' => [
          'id'    => 'expo-2020-countdown',
          'class' => ['countdown', 'container'],
        ],
        'days'        => [
          '#type'       => 'container',
          '#attributes' => [
            'class' => ['countdown-item', 'colour-primary-blue'],
          ],
          'day_num'     => [
            '#type'       => 'container',
            '#attributes' => [
              'id'    => 'days',
              'class' => ['countdown-number'],
            ],
          ],
          'day_label'   => [
            '#type'       => 'container',
            '#attributes' => [
              'class' => ['countdown-date'],
            ],
            '#markup'     => 'DAYS',
          ],
        ],
        'colon1'      => [
          '#type'       => 'container',
          '#attributes' => [
            'class' => ['countdown-item'],
          ],
          'inner'       => [
            '#type'       => 'container',
            '#attributes' => [
              'class' => ['colon'],
            ],
            '#markup'     => ':',
          ],
        ],
        'hours'       => [
          '#type'       => 'container',
          '#attributes' => [
            'class' => ['countdown-item', 'colour-green'],
          ],
          'hours_num'   => [
            '#type'       => 'container',
            '#attributes' => [
              'id'    => 'hours',
              'class' => ['countdown-number'],
            ],
          ],
          'hours_label' => [
            '#type'       => 'container',
            '#attributes' => [
              'class' => ['countdown-date'],
            ],
            '#markup'     => 'HOURS',
          ],
        ],
        'colon2'      => [
          '#type'       => 'container',
          '#attributes' => [
            'class' => ['countdown-item'],
          ],
          'inner'       => [
            '#type'       => 'container',
            '#attributes' => [
              'class' => ['colon'],
            ],
            '#markup'     => ':',
          ],
        ],
        'minutes'     => [
          '#type'       => 'container',
          '#attributes' => [
            'class'     => ['countdown-item', 'colour-orange'],
          ],
          'minutes_num'   => [
            '#type'       => 'container',
            '#attributes' => [
              'id'    => 'minutes',
              'class' => ['countdown-number'],
            ],
          ],
          'minutes_label' => [
            '#type'       => 'container',
            '#attributes' => [
              'class' => ['countdown-date'],
            ],
            '#markup'     => 'MINUTES',
          ],
        ],
        'colon3'      => [
          '#type'       => 'container',
          '#attributes' => [
            'class' => ['countdown-item'],
          ],
          'inner'       => [
            '#type'       => 'container',
            '#attributes' => [
              'class' => ['colon'],
            ],
            '#markup'     => ':',
          ],
        ],
        'seconds'     => [
          '#type'       => 'container',
          '#attributes' => [
            'class'     => ['countdown-item', 'colour-brown'],
          ],
          'seconds_num'   => [
            '#type'       => 'container',
            '#attributes' => [
              'id'    => 'seconds',
              'class' => ['countdown-number'],
            ],
          ],
          'seconds_label' => [
            '#type'       => 'container',
            '#attributes' => [
              'class' => ['countdown-date'],
            ],
            '#markup'     => 'SECONDS',
          ],
        ],
      ];
    }
  }

}

/**
 * Returns the title of the top level menu item for the current node.
 * @return Link
 */
function _expo2020_get_top_menu_title()
{
  $result = &drupal_static(__FUNCTION__);

  if (is_null($result)) {
    $menu_items = _expo2020_get_top_menu_title_for_menu('main');

    if (empty($menu_items)) {
      $menu_items = _expo2020_get_top_menu_title_for_menu('footer');
    }

    if (!empty($menu_items)) {
      $menu_item = reset($menu_items);
      $url       = $menu_item->link->getUrlObject();
      $title     = $menu_item->link->getTitle();
      $result    = Link::fromTextAndUrl($title, $url);
    } else {
      $result = [];
    }
  }

  return $result;
}

/**
 * @param $menu
 * @return \Drupal\Core\Menu\MenuLinkTreeElement
 */
function _expo2020_get_top_menu_title_for_menu($menu)
{
  $menu_tree  = Drupal::menuTree();
  $parameters = $menu_tree->getCurrentRouteMenuTreeParameters($menu);
  $parameters->setTopLevelOnly();

  $menu_items = $menu_tree->load('main', $parameters);

  $menu_items = array_filter($menu_items, function ($item) {
    return $item->inActiveTrail;
  });

  return $menu_items;
}

/**
 * Implements hook_theme_suggestions_block_alter().
 */
function expo2020_theme_suggestions_block_alter(array &$suggestions, array $variables)
{
  $elements = $variables['elements'];

  $region = null;

  if (!empty($elements['#base_plugin_id']) && !empty($elements['#configuration']['region']) && !empty($elements['#configuration']['view_mode'])) {
    array_unshift($suggestions, 'block__region_' . $elements['#configuration']['region']);
    $suggestions[] = 'block__region_' . $elements['#configuration']['region'] . '__' . $elements['#base_plugin_id'];
    $suggestions[] = 'block__region_' . $elements['#configuration']['region'] . '__' . $elements['#base_plugin_id'] . '__' . $elements['#configuration']['view_mode'];

  } elseif (!empty($elements['#id'])) {
    $block = Block::load($elements['#id']);
    // Add suggestions
    array_unshift($suggestions, 'block__region_' . $block->getRegion());
    $suggestions[] = 'block__region_' . $block->getRegion() . '__' . $elements['#id'];
  }

  if (!empty($elements['#base_plugin_id'])) {
    switch ($elements['#base_plugin_id']) {
      case 'block_content':
        if ($bundle = $elements['content']['#bundle'] ?? null) {
          $suggestions[] = 'block__bundle_' . $bundle;
          $suggestions[] = 'block__bundle_' . $bundle . '__' . $elements['#derivative_plugin_id'];
        }
        break;
    }
  }

  // Inserted block bundle type suggestion
  if (isset($elements['content']['#block_content'])) {
    $bundle = $elements['content']['#block_content']->bundle();

    $new_suggestions = [];

    $block__block_content_count = 0;

    foreach ($suggestions as $suggestion){
      if ($suggestion == 'block__block_content'){
        $block__block_content_count++;
      }
    }

    if($block__block_content_count !== 0){
      foreach ($suggestions as $suggestion){
        $new_suggestions[] = $suggestion;
        if ($suggestion == 'block__block_content'){
          $block__block_content_count--;
          if ($block__block_content_count == 0){
            $new_suggestions[] = "block__block_bundle__{$bundle}";
          }
        }
      }
    }

    $suggestions = $new_suggestions;
  }

  return $suggestions;
}

/**
 * Implements hook_theme_suggestions_region_alter().
 */
function expo2020_theme_suggestions_region_alter(array &$suggestions, array $variables)
{
  if (!empty($variables['elements']['#region'])) {
    if ($variables['elements']['#region'] === 'sidebar_search') {
      if ($display_id = \Drupal::routeMatch()->getParameter('display_id')) {
        $suggestions[] = 'region__' . $variables['elements']['#region'] . '__view_' . $display_id;
      }

    }
  }

}

/**
 * Implements hook_theme_suggestions_field_alter().
 */
function expo2020_theme_suggestions_field_alter(array &$suggestions, array $variables)
{
  $element = $variables['element'];

  $suggestions[] = 'field__' . $element['#view_mode'];
  $suggestions[] = 'field__' . $element['#view_mode'] . '__' . $element['#bundle'];
  $suggestions[] = 'field__' . $element['#view_mode'] . '__' . $element['#field_name'];
  $suggestions[] = 'field__' . $element['#entity_type'] . '__' . $element['#view_mode'] . '__' . $element['#bundle'];
  $suggestions[] = 'field__' . $element['#entity_type'] . '__' . $element['#view_mode'] . '__' . $element['#field_name'];
  $suggestions[] = 'field__' . $element['#entity_type'] . '__' . $element['#view_mode'] . '__' . $element['#field_name'] . '__' . $element['#bundle'];

}

/**
 * Implements hook_theme_suggestions_menu_alter().
 */
function expo2020_theme_suggestions_menu_alter(array &$suggestions, array $variables)
{
  if (isset($variables['menu_block_configuration']['region'])) {
    $region        = $variables['menu_block_configuration']['region'];
    $suggestions[] = 'menu__' . $variables['menu_name'] . '__' . $region;
  }
}

/**
 * Implements hook_theme_suggestions_item_list_alter().
 */
function expo2020_theme_suggestions_item_list_alter(array &$suggestions, array $variables)
{
  if (!empty($variables['attributes']['class'])) {
    if (in_array('sub-menu--side', $variables['attributes']['class'])) {
      $suggestions[] = 'item_list__sub_menu__side';
    }
    if (in_array('large-numbers', $variables['attributes']['class'])) {
      $suggestions[] = 'item_list__large_numbers';
    }
  }
}

/**
 * Implements hook_theme_suggestions_form_element_alter().
 */
function expo2020_theme_suggestions_form_element_alter(array &$suggestions, array $variables)
{
  if (!empty($variables['element']['#parents'])) {
    $parents = $variables['element']['#parents'];
    array_pop($parents);

    if (!empty($parents)) {
      $suggestions[] = 'form_element__parent__' . implode('__', $parents);
    }

    if (!empty($variables['element']['#webform_key'])) {
      $suggestions[] = 'form_element__webform__' . $variables['element']['#webform_key'];
    }
  }
}

/**
 * Implements hook_theme_suggestions_form_element_alter().
 */
function expo2020_theme_suggestions_datetime_form_alter(array &$suggestions, array $variables)
{
  if (!empty($variables['element']['#webform_key'])) {
    $suggestions[] = 'datetime_form__webform__' . $variables['element']['#webform_key'];
  }}

/**
 * Implements template_preprocess_views_exposed_form().
 */
function expo2020_preprocess_views_exposed_form(&$variables) {
  $form =& $variables['form'];

  if ( $form['#id'] == 'views-exposed-form-media-listing-news-listing-page'){

    _expo2020_convert_taxonomy_type_select_to_links($form, 'news');

    $form['actions']['#access'] = FALSE;

    $form['collapse_search'] =
      [
        '#type'       => 'container',
        '#attributes' => [
          'class' => [
            'news-types-collapse-search',
          ],
        ],
        'combine'     => $form['combine'],
        'submit'      => $form['actions']['submit'],
      ];

    unset($form['combine']);
  }


  if ($form['#id'] == 'views-exposed-form-event-listing-whats-on') {

    _expo2020_convert_taxonomy_type_select_to_links($form, 'event');

    $form['title_links_search'] = [
      '#type' => 'container',
      '#attributes' => [
        'class' => [
          'event-listing-title-links-search',
        ],
      ],

      'title' => [
        '#type' => 'container',
        '#attributes' => [
          'class' => [
            'event-listing-title',
          ],
        ],
        '#markup' => '<h2>What\'s on</h2>',
      ],

      'type_filter_links' => $form['type_filter_links'],
      //'combine' => $form['combine'],
    ];

    unset($form['combine']);
    unset($form['type_filter_links']);

    $form['field_event_date_value']['max']['#title'] = new TranslatableMarkup('to');
    
    $form['actions']['#attributes']['data-toggle'] = 'tooltip';
    $form['actions']['#attributes']['title'] = "Please fill both 'from' and 'to' filters to search events successfully.";
    $form['actions']['#attributes']['data-placement'] = 'right';

    $form['date_n_submit'] = [
      '#type' => 'container',
      '#attributes' => [
        'class' => [
          'event-listing-date-n-submit',
        ],
      ],
      'date_outer' => [
        '#type' => 'container',
        '#attributes' => [
          'class' => [
            'event-listing-date-outer-wrapper',
          ],
        ],
        'Browse_by' => [
          '#type' => 'container',
          '#attributes' => [
            'class' => [
              'event-listing-date-label',
            ],
          ],
          '#markup' => '<i class="fas fa-calendar-alt"></i> BROWSE BY DATE',
        ],

        'field_event_date_value' => $form['field_event_date_value'],
      ],
      'actions' => $form['actions'],
    ];

    unset($form['field_event_date_value']);
    unset($form['actions']);
  }

  if ( $form['#id'] == 'views-exposed-form-search-api-db-search-api-db'){
    if (isset($form['actions']) && isset($form['keys'])){
      $form['actions']['#access'] = FALSE;
      $form['keys']['#theme_wrappers'] = ['global_fulltext_search_theme_wrapper'];
    }
  }
}

function expo2020_preprocess_views_view(&$vars){
  if (isset($vars['id'])
      && $vars['id'] == 'search_api_db'
      && isset($vars['display_id'])
      && $vars['id'] == 'search_api_db') {
    $block_manager = \Drupal::service('plugin.manager.block');
    $plugin_block = $block_manager->createInstance('system_breadcrumb_block');

    $vars['breadcrumbs'] =  $plugin_block->build();
  }
}

function expo2020_theme(){
  return [
    'global_fulltext_search_theme_wrapper' => ['render element' => 'element',],
  ];
}

function _expo2020_convert_taxonomy_type_select_to_links(&$form , $type = 'news'){

  $form['field_news_media_type_target_id']['#prefix'] = '<div class="invisible">';
  $form['field_news_media_type_target_id']['#suffix'] = '</div>';

  if (!empty($form['field_news_media_type_target_id']['#options'])){

    $type_filter_links = [
      '#type' => 'container',
      '#attributes' => [
        'class' => [
          $type == 'news' ? 'news-types-filter-container' : 'event-types-filter-container',
        ],
      ],
    ];

//    $current_url_str = $type == 'news' ? "{$form['#action']}?combine={$form['combine']['#value']}"
//      : "{$form['#action']}?combine={$form['combine']['#value']}&field_event_date_value[min]={$form['field_event_date_value']['min']['#value']}&field_event_date_value[max]={$form['field_event_date_value']['max']['#value']}";

    if ($type == 'news') {
      $anchor_id = 'block-newstopcontenttext';
      $class_to_add = 'news-type-filter-links';
    }
    else {
      $anchor_id = 'block-whatsonsecondbanner';
      $class_to_add = 'event-type-filter-links';
    }

    foreach ($form['field_news_media_type_target_id']['#options'] as $tid => $t_name){

      $active = ($form['field_news_media_type_target_id']['#value'] == $tid) ? ' active' : '';

      if ($tid != 'All') {
        $term = Term::load($tid);

        if (empty($term)){
          continue;
        }

        $icon = empty($term->field_fontawesome_icon[0]->value) ? '' : $term->field_fontawesome_icon[0]->value;

        $type_filter_links[mb_strtolower($t_name)] = [
          '#title' => ['#markup' => (mb_strtolower($t_name) == 'twitter' && $type == 'news') ? $icon : $icon . t($t_name)],
          '#type' => 'link',
          '#url' =>  \Drupal\Core\Url::fromUserInput("{$form['#action']}?field_news_media_type_target_id={$tid}#{$anchor_id}"),
          '#options' => [
            'attributes' => [
              'class' => $class_to_add . $active,
            ],
          ],
        ];
      }
      else {
        $type_filter_links['all'] = [
          '#title' => t('ALL'),
          '#type' => 'link',
          '#url' =>  \Drupal\Core\Url::fromUserInput("{$form['#action']}?field_news_media_type_target_id=All#{$anchor_id}"),
          '#options' => [
            'attributes' => [
              'class' => $class_to_add . $active,
            ],
          ],
        ];
      }
    }

    $form['type_filter_links'] = $type_filter_links;
  }
}


function expo2020_preprocess_node(&$variables) {

  $types_with_special_bc = [
    'contact',
    'media_landing_page',
    'themes',
    'sponsors_partners_landing_page',
  ];

  if (!empty($variables['node'])
      && in_array($variables['node']->getType(),$types_with_special_bc)){
    $block_manager = \Drupal::service('plugin.manager.block');
    $plugin_block = $block_manager->createInstance('system_breadcrumb_block');

    $variables['breadcrumbs'] =  $plugin_block->build();
  }

}

function expo2020_preprocess_superfish_menu_items(&$vars){
  if (!empty($vars['menu_items'])) {
    foreach ($vars['menu_items'] as $key => $menu_item) {
      if (!empty($menu_item['children']) && isset($menu_item['link_menuparent'])) {
        $vars['menu_items'][$key]['link_menuparent']['#title'] = [
          '#markup' => $menu_item['link_menuparent']['#title'] . '<span class="sf-fas-menu-icon"><i class="fas fa-chevron-down"></i></span>'
        ];
      }
    }
  }
}